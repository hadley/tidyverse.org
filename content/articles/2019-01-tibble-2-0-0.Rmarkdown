---
title: tibble 2.0.0
slug: tibble-2.0.0
description: >
    Tibbles are a modern reimagining of the data frame, keeping what time has shown to be effective, and throwing out what is not, with nicer default output too! This article describes the latest major release and provides an outlook on further developments
date: 2019-01-06
author: Kirill MÃ¼ller
photo:
  url: https://unsplash.com/photos/KA89yJKYtjE
  author: Marcello Gennari
categories: [package]
---


```{r setup, include = FALSE}
library(tidyverse)
knitr::opts_chunk$set(collapse = TRUE, comment = "#>", error = TRUE)
options(rlang_trace_top_env = .GlobalEnv)

options(crayon.enabled = TRUE)
fansi::set_knit_hooks(knitr::knit_hooks, which = c("output", "error"))
```

I'm pleased to announce that version 2.0.0 of the *tibble* package is on CRAN now. Tibbles are a modern reimagining of the data frame, keeping what time has shown to be effective, and throwing out what is not, with nicer default output too! Grab the latest version with:

```r
install.packages("tibble")
```

This release required a bit of preparation, including a [pre-release blog post](https://www.tidyverse.org/articles/2018/11/tibble-2.0.0-pre-announce/) that described the breaking changes.
In this blog post, I focus on a few user- and programmer-related changes, and give an outlook over future development:

- 2D columns, `view()`, nameless `enframe()`
- Robustness, lifecycle, name repair, row names, `glimpse()` for subclasses
- _vctrs_, smaller footprint, decorations

For a complete overview please see the [release notes](https://github.com/tidyverse/tibble/releases/tag/v2.0.0).

Use the [issue tracker](https://github.com/tidyverse/tibble/issues) to submit bugs or suggest ideas, your contributions are always welcome.

## Changes that affect users

`tibble()` now supports columns that are matrices or data frames.
The number of rows in these objects must be consistent with the length of the other columns.
Internally, this feature required using `NROW()` instead of `length()` in a few spots, which conveniently returns the length for vectors and the number of rows for 2D objects.
The required support in _pillar_ has been added earlier last year.

```{r hierarchical}
tibble(
  a = 1:3,
  b = tibble(c = 4:6),
  d = tibble(e = 7:9, f = tibble(g = 10, h = 11)),
  i = diag(3)
)
```

The experimental `view()` function forwards its input to `utils::View()` (only in interactive mode) and always returns its input invisibly, which is useful for pipe-based workflows.
Currently it is unclear if this functionality should live in _tibble_ or elsewhere.

```{r view}
# This is a no-op in non-interactive mode.
# In interactive mode, a viewer window/pane will open.
iris %>%
  view()
```


The `enframe()` function always has been a good way to convert a (named) vector to a two-column data frame.
In this version, conversion to a one-column data frame is also supported by setting the `name` argument to `NULL`.
This is now the recommended way to turn a vector to a one-column tibble, due to changes to the default implementation of `as_tibble()`.

```{r enframe}
enframe(letters[1:3])
enframe(letters[1:3], name = NULL)
```

## Changes that affect package developers

All functions have been assigned a lifecycle.
The _tibble_ package has now reached the "stable" lifecycle, functions in a different lifecycle stage are marked as such in their documentation.
One example is the `add_row()` function: it is unclear if it  should ensure that all columns have length one by wrapping in a list if necessary, and a better implementation is perhaps possible once _tibble_ uses the _vctrs_ package, see below.
Therefore this function is marked "questioning".
Learn more about lifecycle in the tidyverse at https://www.tidyverse.org/lifecycle/.

The new `.rows` argument to `tibble()` and `as_tibble()` allows specifying the expected number of rows explicitly, even if it's evident from the data.
This supports writing even more defensive code.
The `nrow` argument to the low-level `new_tibble()` constructor is now mandatory, on the other hand most expensive checks have been moved to the new `validate_tibble()` function.
This means that constructions of tibbles is now faster by default if you know that the inputs are correct, but you can always double-check if needed.

```{r nrow}
tibble(a = 1, b = 1:3, .rows = 3)
tibble(a = 1, b = 2:3, .rows = 3)
tibble(a = 1, .rows = 3)
as_tibble(iris[1:3, ], .rows = 3)
new_tibble(list(a = 1:3), nrow = 3)
bad <- new_tibble(list(a = 1:2), nrow = 3)
validate_tibble(bad)
```

Column name repair has more direct support, via the new `.name_repair` argument to `tibble()` and `as_tibble()`.
It takes the following values:

  - `"minimal"`: No name repair or checks, beyond basic existence.
  - `"unique"`: Make sure names are unique and not empty.
  - `"check_unique"`: (default value), no name repair, but check they are `unique`.
  - `"universal"`: Make the names `unique` and syntactic.
  - a function: apply custom name repair (e.g., `.name_repair = make.names` or `.name_repair = ~make.names(., unique = TRUE)` for names in the style of base R).

```{r repair-names}
## by default, duplicate names are not allowed
tibble(` ` = 1, ` ` = 2)
## you can authorize duplicate names
tibble(` ` = 1, ` ` = 2, .name_repair = "minimal")
## or request that the names be made unique
tibble(` ` = 1, ` ` = 2, .name_repair = "unique")
## or or universal
tibble(` ` = 1, ` ` = 2, .name_repair = "universal")
```

Row name handling is stricter.
Row names are never (and never were) supported in `tibble()` and `new_tibble()`, and are now stripped by default in `as_tibble()`.
The `rownames` argument to `as_tibble()` supports:

  - `NULL`: remove row names (default),
  - `NA`: keep row names,
  - A string: the name of the new column that will contain the existing row names, which are no longer present in the result.
    
  The old default can be restored by calling `pkgconfig::set_config("tibble::rownames", NA)`, this also works for packages that import _tibble_.
    
```{r row-names}
rownames(as_tibble(mtcars))
as_tibble(mtcars, rownames = "make_model")
```

The `glimpse()` function shows information obtained from `tbl_sum()` in the header, e.g. grouping information for `grouped_df` from _dplyr_, or other information from packages that override the `tbl_df` class.

```{r}
iris %>%
  dplyr::group_by(Species) %>%
  glimpse()
```


## Outlook

The plan is to [use _vctrs_](https://github.com/tidyverse/tibble/issues/521) in _tibble_ 2.1.0.
This package is a solid foundation for handling coercion, concatenation and recycling in vectors of arbitrary type.
The support provided by _vctrs_ will yield a better `add_row()` implementation, in return name repair which is currently defined in _tibble_ should likely live in _vctrs_.

Currently, installing _tibble_ can bring in almost dozen other packages:

```{r deps}
tools::package_dependencies("tibble", recursive = TRUE, which = "Imports")
```

Some of them, namely _fansi_ and _utf8_, are fairly heavy.
[The plan](https://github.com/tidyverse/tibble/issues/475) is to make these packages, and _crayon_, a suggested package to _cli_, and provide fallback implementations there.
When finished, taking a strong dependency on _tibble_ won't add too many new dependencies (again): _rlang_, _vctrs_ and _cli_ will be used by most of the tidyverse anyway, _pillar_ is the only truly new strong dependency.
Packages that subclass `tbl_df` should import _tibble_ to make sure that the subsetting operator `[` always behaves the same.
Constructing (subclasses of) tibbles should happen through `new_tibble()` only.

Tibbles have a very opinionated way to print their data, not always in line with users' expectations, and sometimes clearly wrong (e.g. for numerical data where the absolute mean is much larger than the standard deviation).
It seems difficult to devise a formatting that suits all needs, especially for numbers: how do we tell if a number represents money, or perhaps is a misspecified categorical variable or a UID?
[Decorations](https://github.com/tidyverse/tibble/pull/411) are an idea that might help here.
A decoration is applied only when printing a vector, which behaves identically to a bare vector otherwise.
Decorations can be "learned" from the data (using heuristics), or specified directly after import or when creating column.
Details are stored in attribues like `"class"`, and it will be important to make sure that these attributes survive common manipulations such as subsetting and basic _dplyr_ verbs, and perhaps some arithmetic transformations (which is currently not the case):

```{r decor}
x <- structure(1:3, class = "decor", decor_attrs = 42)
x

tbl <- tibble(x)
tbl[1:2, ]$x

tbl %>% dplyr::select(x) %>% pull()
tbl %>% dplyr::arrange(desc(x)) %>% pull()
tbl %>% dplyr::filter(x > 1) %>% pull()
tbl %>% dplyr::mutate(y = x + 1) %>% pull()
tbl %>% dplyr::summarize(mean(x)) %>% pull()
```

## Acknowledgments

We received issues, pull requests, and comments from 108 people since tibble 1.4.2. Thanks to everyone:

[&#x0040;adam-gruer](https://github.com/adam-gruer), [&#x0040;aegerton](https://github.com/aegerton), [&#x0040;alaindanet](https://github.com/alaindanet), [&#x0040;alexpghayes](https://github.com/alexpghayes), [&#x0040;alexwhan](https://github.com/alexwhan), [&#x0040;alistaire47](https://github.com/alistaire47), [&#x0040;anhqle](https://github.com/anhqle), [&#x0040;batpigandme](https://github.com/batpigandme), [&#x0040;brendanf](https://github.com/brendanf), [&#x0040;brodieG](https://github.com/brodieG), [&#x0040;cfhammill](https://github.com/cfhammill), [&#x0040;christophsax](https://github.com/christophsax), [&#x0040;cimentadaj](https://github.com/cimentadaj), [&#x0040;czeildi](https://github.com/czeildi), [&#x0040;DasHammett](https://github.com/DasHammett), [&#x0040;DavisVaughan](https://github.com/DavisVaughan), [&#x0040;earowang](https://github.com/earowang), [&#x0040;Eluvias](https://github.com/Eluvias), [&#x0040;Enchufa2](https://github.com/Enchufa2), [&#x0040;esford3](https://github.com/esford3), [&#x0040;flying-sheep](https://github.com/flying-sheep), [&#x0040;gavinsimpson](https://github.com/gavinsimpson), [&#x0040;GeorgeHayduke](https://github.com/GeorgeHayduke), [&#x0040;gregorp](https://github.com/gregorp), [&#x0040;hadley](https://github.com/hadley), [&#x0040;IndrajeetPatil](https://github.com/IndrajeetPatil), [&#x0040;iron0012](https://github.com/iron0012), [&#x0040;isteves](https://github.com/isteves), [&#x0040;jeffreyhanson](https://github.com/jeffreyhanson), [&#x0040;jennybc](https://github.com/jennybc), [&#x0040;jimhester](https://github.com/jimhester), [&#x0040;JLYJabc](https://github.com/JLYJabc), [&#x0040;joranE](https://github.com/joranE), [&#x0040;jtelleriar](https://github.com/jtelleriar), [&#x0040;karldw](https://github.com/karldw), [&#x0040;kendonB](https://github.com/kendonB), [&#x0040;kevinushey](https://github.com/kevinushey), [&#x0040;kovla](https://github.com/kovla), [&#x0040;lbusett](https://github.com/lbusett), [&#x0040;lionel-](https://github.com/lionel-), [&#x0040;lorenzwalthert](https://github.com/lorenzwalthert), [&#x0040;lwiklendt](https://github.com/lwiklendt), [&#x0040;mattfidler](https://github.com/mattfidler), [&#x0040;MatthieuStigler](https://github.com/MatthieuStigler), [&#x0040;maxheld83](https://github.com/maxheld83), [&#x0040;michaelweylandt](https://github.com/michaelweylandt), [&#x0040;mingsu](https://github.com/mingsu), [&#x0040;momeara](https://github.com/momeara), [&#x0040;PalaceChan](https://github.com/PalaceChan), [&#x0040;pat-s](https://github.com/pat-s), [&#x0040;plantarum](https://github.com/plantarum), [&#x0040;prosoitos](https://github.com/prosoitos), [&#x0040;ptoche](https://github.com/ptoche), [&#x0040;QuLogic](https://github.com/QuLogic), [&#x0040;ralonso-igenomix](https://github.com/ralonso-igenomix), [&#x0040;randomgambit](https://github.com/randomgambit), [&#x0040;riccardopinosio](https://github.com/riccardopinosio), [&#x0040;romainfrancois](https://github.com/romainfrancois), [&#x0040;tomroh](https://github.com/tomroh), [&#x0040;Woosah](https://github.com/Woosah), [&#x0040;yonicd](https://github.com/yonicd), and [&#x0040;yutannihilation](https://github.com/yutannihilation).
